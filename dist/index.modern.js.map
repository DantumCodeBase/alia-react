{"version":3,"file":"index.modern.js","sources":["../src/Input/Input.js","../src/Button/Button.js","../src/LineChart/LineChart.js","../src/Barchart/BarChart.js","../src/index.js"],"sourcesContent":["import React from 'react'\n\nimport './Input.scss'\n\nexport const Input = () => {\n  return <input className='alia-input' />\n}\n","import React from 'react'\n\nimport './Button.scss'\n\nexport const Button = ({ type = 'button', children }) => {\n  return <button type={type} className=\"d-button\">{children}</button>\n}\n","import React, { Fragment, useState } from 'react'\nimport Tooltip from '../Tooltip'\nimport './LineChart.scss'\n\nexport const LineChart = (props) => {\n  const [tooltipVisible, setTooltipVisible] = useState(null)\n  const { height, width, padding, data, labels } = props\n\n  if (!data) return null\n\n  const initialState2 = {}\n  data.forEach((data, idx) => (initialState2[idx] = true))\n\n  const [visible, setVisible] = useState(initialState2)\n\n  const colors = [\n    '#304e62',\n    '#55bcc8',\n    '#ABABAB',\n    '#304e62',\n    '#55bcc8',\n    '#ABABAB'\n  ]\n  const FONT_SIZE = 12\n\n  const maxX = Math.max(...data.map((d) => Math.max(...d.map((e) => e.x))))\n  const minX = Math.min(...data.map((d) => Math.min(...d.map((e) => e.x))))\n\n  const maxValue = Math.max(...data.map((d) => Math.max(...d.map((e) => e.y)))) * 1.25;\n  const maxZeros = 10 ** (maxValue.toFixed().toString().length - 1)\n  const maxY = (Math.ceil(maxValue / maxZeros) * maxZeros) || 5\n\n  const minValue = Math.min(...data.map((d) => Math.min(...d.map((e) => e.y)))) * 1.25;\n  const minZeros = 10 ** (Math.abs(minValue).toFixed().toString().length - 1)\n  let minY = (Math.floor(minValue / minZeros) * minZeros)\n\n  if (minY > 0){\n    minY = 0\n  }\n  \n  console.log(\"minimum\", minY)\n  console.log(\"max\", maxY)\n\n  const points = data.map((singlePlot) =>\n    singlePlot\n      .map((element) => {\n        // Calculate coordinates\n        const x = ((element.x - minX) / (maxX - minX)) * width + padding\n        const y = height - (element.y / Math.abs(maxY - minY)) * height + padding - Math.abs(minY)/ Math.abs(maxY - minY)*height \n        return `${x},${y}`\n      })\n      .join(' ')\n  )\n\n\n  const pointsCoords = data.map((singlePlot, idx) =>\n    singlePlot\n      .map((element) => {\n        // Calculate coordinates\n        const x = ((element.x - minX) / (maxX - minX)) * width + padding\n        const y = height - (element.y / Math.abs(maxY - minY)) * height + padding - Math.abs(minY)/ Math.abs(maxY - minY)*height \n        \n        return [x, y, element.y, idx, element.label]\n      })\n  )\n  \n  const Axis = ({ points, stroke='#EDEDED' }) => (\n    <polyline\n      fill='solid'\n      stroke={stroke}\n      strokeWidth='1'\n      points={points}\n      strokeLinecap='round'\n    />\n  )\n\n  const XAxis = () => {\n    const zeroY = height + padding - Math.abs(minY)/ Math.abs(maxY - minY)*height || 200;\n    console.log(zeroY)\n\n    return (<Axis stroke='#a0a0a0' points={`${padding},${zeroY} ${width},${zeroY}`} />);\n\n  }\n\n\n\n  const HorizontalGuides = () => {\n    const startX = padding\n    const endX = width\n    const numberOfHorizontalGuides = 5\n\n    return new Array(numberOfHorizontalGuides -1).fill(0).map((_, index) => {\n      const yRatio = Math.abs(maxY-minY) / numberOfHorizontalGuides\n      const ratio = (index + 1) / numberOfHorizontalGuides\n      const displayNumber = index * yRatio + yRatio + minY;\n      const yCoordinate = height - height * ratio + padding\n\n      return (\n        <Fragment key={index}>\n          <text\n            key={`${index}-text`}\n            x={startX}\n            y={ displayNumber>=0 ? (yCoordinate - 5) : (yCoordinate + 15) }\n            style={{\n              fontSize: 14,\n              fontFamily: 'Nunito',\n              fill: colors[2],\n              fontWeight: 'bold'\n            }}\n          >\n            {(index * yRatio + yRatio + minY ).toPrecision(4)} KW\n          </text>\n          <polyline\n            key={index}\n            fill='none'\n            stroke='#e0e0e0'\n            strokeDasharray='1 5'\n            strokeLinecap='round'\n            strokeWidth='1'\n            points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\n          />\n        </Fragment>\n      )\n    })\n  }\n\n  const LabelsXAxis = () => {\n    const y = height - padding + FONT_SIZE * 2 - Math.abs(minY)/Math.abs(maxY-minY)*height || 224;\n\n\n    return data[0].map((element, index) => {\n      const x =\n        ((element.x - minX) / (maxX - minX)) * width + 10 - FONT_SIZE / 2\n\n      return (\n        <text\n          key={index}\n          x={x}\n          y={y - 20}\n          dominantBaseline='central'\n          textAnchor='start'\n          transform={`rotate(45, ${x}, ${y})`}\n          style={{\n            fill: '#a0a0a0',\n            fontSize: FONT_SIZE,\n            fontWeight: 'bold',\n            fontFamily: 'Nunito'\n          }}\n        >\n          {element.label}\n        </text>\n      )\n    })\n  }\n  // const YAxis = () => (\n  //   <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\n  // )\n\n  const handleVisible = (idx) => {\n    setVisible((prevState) => {\n      const newState = { ...prevState }\n      newState[idx] = !newState[idx]\n      return newState\n    })\n  }\n\n\n  const Mark = ({coord, idx, onMouseOver, onMouseLeave, color=\"red\"}) => {\n\n    return (\n     <g key={`dot-${idx}`} pointerEvents='all' onMouseOver={onMouseOver} onMouseLeave={onMouseLeave}>\n        <circle cx={coord[0]} cy={coord[1]} r='3' fill={color}/>\n      </g>\n      )\n  }\n\n\n  const Tooltips = ({x=500,y=70, label=\"545.245 MW\", sublabel=\"3:24:02\"}) => {\n\n    const rectPos = [x-35, y - 40]\n\n    const height = 25\n    const width = 50\n\n    return (<>\n      <rect x={rectPos[0]} y={rectPos[1]} width={width + label.length*4} height={height} rx=\"15\" fill=\"#c0c0c0\">\n      </rect>\n      <text\n        x={rectPos[0] + (width - label.length)/3}\n        y={rectPos[1] + height/2}\n        style={{\n          fill: 'white',\n          fontSize: '0.7rem',\n          fontWeight: 'bold',\n          fontFamily: 'Nunito'\n        }}>\n          {label}\n      </text>\n      <text\n        x={rectPos[0] + (width - label.length)/3}\n        y={rectPos[1] + height/2 + 10}\n        style={{\n          fill: 'white',\n          fontSize: '0.6rem',\n          fontWeight: 'bold',\n          fontFamily: 'Nunito'\n        }}>\n          {sublabel}\n      </text>\n\n      </>\n    )\n  }\n\n  \n\n  return (\n    <>\n      <div className='phase' style={{ float: 'right', marginBottom: '15px'}}>\n        {points.map((points, idx) => (\n          <a\n            key={idx}\n            style={{ color: colors[idx], opacity: visible[idx] ? 1 : 0.5 }}\n            onClick={(e) => handleVisible(idx)}\n          >\n            {labels[idx]}\n          </a>\n        ))}\n      </div>\n      <svg viewBox={`0 0 ${width} ${height + 100}`}>\n        <style>{`.small {color: 'red'} `}</style>\n\n        <XAxis />\n        <LabelsXAxis />\n        \n        {/* <YAxis /> */}\n        <HorizontalGuides />\n        {points.map((points, idx) => {\n          if (visible[idx]) {\n            return (\n              <polyline\n                key={idx}\n                fill='none'\n                stroke={colors[idx]}\n                strokeWidth='3px'\n                strokeLinecap='round'\n                strokeDasharray='5 5'\n                points={points}\n              />\n            )\n          }\n        })}\n        {pointsCoords.map((coords, idxParent) => {\n          if (visible[idxParent]) {\n            return coords.map((coord, idx)=> {\n\n              return <>\n                <Mark \n                  key={idx}\n                  coord={coord} \n                  idx={idx} \n                  color={colors[idxParent]}\n                  onMouseOver={()=> setTooltipVisible(`${coord[0]}-${coord[3]}`)}\n                  onMouseLeave={()=>{\n                    setTooltipVisible(null)}}\n                ></Mark>\n              </>\n            }\n            )\n          }\n\n        })}     \n        {pointsCoords.map((coords, idx) => {\n            if (visible[idx]) {\n              return coords.map((coord, idx)=> {\n                const quantity = coord[2].toFixed(2)\n                return <>\n                  { tooltipVisible == `${coord[0]}-${coord[3]}` &&  \n                  <Tooltips key={idx} x={coord[0]} y={coord[1]} label={`${quantity} kW`} sublabel={coord[4]}>\n                  </Tooltips>}\n                </>\n              }\n              )\n            }\n          })}   \n      </svg>\n\n      \n    </>\n  )\n}\n","import React, { Fragment, useState } from 'react'\nimport './BarChart.scss'\n\nexport const BarChart = (props) => {\n  const { height, width, padding, data } = props\n\n  if (!data) return null\n\n  const initialState2 = {}\n  for (const key in data.data) {\n    initialState2[key] = true\n  }\n\n  const [visible, setVisible] = useState(initialState2)\n  // console.log(visible)\n  const colors = ['#55BDC8', '#304e62', '#ABABAB']\n  const FONT_SIZE = 12\n\n  const maxValue = Math.max(...[].concat(...Object.values(data.data)))\n  const zeros = 10 ** (maxValue.toFixed().toString().length - 1)\n  let maxY = (Math.ceil(maxValue / zeros) * zeros)\n\n  if (maxY < 1) {\n    maxY = 1\n  }\n\n  const xValues = Math.max(\n    ...Object.keys(data.data).map((key, idx) => data.data[key].length)\n  )\n\n  const deltaX = (width - 50) / xValues\n  // console.log(deltaX)\n  // console.log(maxY)\n  // generate [[[[x,y], [x,y]],[xy, xy]], []]\n  const points = Object.values(data.data).map((series) => {\n    return series.map((point, idx) => [\n      50 + deltaX * idx + 8,\n      height - (point / maxY) * height\n    ])\n  })\n\n  const Axis = ({ points }) => (\n    <polyline\n      fill='solid'\n      stroke='#EDEDED'\n      strokeWidth='2'\n      points={points}\n      strokeLinecap='round'\n    />\n  )\n\n  const XAxis = () => (\n    <Axis points={`${padding},${height + 36} ${width},${height + 36}`} />\n  )\n\n  const HorizontalGuides = () => {\n    const startX = padding\n    const endX = width\n    const numberOfHorizontalGuides = 5\n\n    return new Array(numberOfHorizontalGuides).fill(0).map((_, index) => {\n      const yRatio = maxY / numberOfHorizontalGuides\n      const ratio = (index + 1) / numberOfHorizontalGuides\n\n      const yCoordinate = height - height * ratio + padding + 20\n\n      return (\n        <Fragment key={index}>\n          <text\n            key={`${index}-text`}\n            x={startX}\n            y={yCoordinate - 5}\n            style={{\n              fontSize: 10,\n              fontFamily: 'Nunito',\n              fill: colors[2]\n            }}\n          >\n            {(index * yRatio + yRatio).toFixed(2)} kWh\n          </text>\n          <polyline\n            key={index}\n            fill='none'\n            stroke='#EDEDED'\n            strokeDasharray='3 3'\n            strokeLinecap='round'\n            strokeWidth='1'\n            points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\n          />\n        </Fragment>\n      )\n    })\n  }\n\n  const LabelsXAxis = () => {\n    const y = height - padding + FONT_SIZE * 2\n\n    return data.labels.map((element, index) => {\n      const x =\n        ((index - 0) / (12.7 - 0)) * width + 65 - FONT_SIZE / 2\n\n      return (\n        <text\n          key={index}\n          x={x}\n          y={y + 28}\n          style={{\n            fill: '#ccc',\n            fontSize: FONT_SIZE,\n            fontWeight: 'bold',\n            fontFamily: 'Nunito'\n          }}\n        >\n          {element}\n        </text>\n      )\n    })\n  }\n  // const YAxis = () => (\n  //   <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\n  // )\n\n  const handleVisible = (idx) => {\n    setVisible((prevState) => {\n      const newState = { ...prevState }\n      newState[idx] = !newState[idx]\n      return newState\n    })\n  }\n\n  return (\n    <>\n      <div className='phase' style={{ float: 'right', marginBottom: '15px' }}>\n        {Object.keys(data.data).map((key, idx) => (\n          <a\n            key={idx}\n            style={{ color: colors[idx], opacity: visible[key] ? 1 : 0.5 }}\n            onClick={(e) => handleVisible(key)}\n          >\n            {key}\n          </a>\n        ))}\n      </div>\n      <svg viewBox={`0 0 ${width} ${height + 60}`}>\n        <style>{`.small {color: 'red'} `}</style>\n\n        <XAxis />\n        <LabelsXAxis />\n        {/* <YAxis /> */}\n        <HorizontalGuides />\n        {points.map((series, idx) => {\n          if (visible[Object.keys(data.data)[idx]]) {\n            return series.map((point, idxline) => {\n              // <polyline\n              //   key={idx}\n              //   fill='none'\n              //   stroke={colors[idx]}\n              //   strokeWidth='3px'\n              //   strokeLinecap='round'\n              //   strokeDasharray='10 5'\n              //   points={points}\n              // />\n              return (\n                <line\n                  key={idxline}\n                  x1={point[0] + idx * 14}\n                  y1={point[1] + 25}\n                  x2={point[0] + idx * 14}\n                  y2={height + 25}\n                  stroke={colors[idx]}\n                  strokeWidth='9.5'\n                  strokeLinecap='round'\n                />\n              )\n            })\n          }\n          return null\n        })}\n      </svg>\n    </>\n  )\n}\n","import React from 'react'\nimport styles from './styles.module.css'\n// import Input from './Input'\n\n// Components\nexport { Input } from './Input'\nexport { Button } from './Button'\nexport { LineChart } from './LineChart'\nexport { BarChart } from './Barchart'\n\nexport const ExampleComponent = ({ text }) => {\n  return <div className={styles.test}>Example Component: {text}</div>\n}\n\n// export const Input = () => <div>Hola</div>\n"],"names":["Input","Button","type","children","LineChart","props","useState","tooltipVisible","setTooltipVisible","height","width","padding","data","labels","initialState2","forEach","idx","visible","setVisible","colors","FONT_SIZE","maxX","Math","max","map","d","e","x","minX","min","maxValue","y","maxZeros","toFixed","toString","length","maxY","ceil","minValue","minZeros","abs","minY","floor","console","log","points","singlePlot","element","join","pointsCoords","label","Axis","stroke","XAxis","zeroY","HorizontalGuides","startX","endX","numberOfHorizontalGuides","Array","fill","_","index","yRatio","ratio","displayNumber","yCoordinate","fontSize","fontFamily","fontWeight","toPrecision","LabelsXAxis","handleVisible","prevState","newState","Mark","coord","onMouseOver","onMouseLeave","color","Tooltips","sublabel","rectPos","marginBottom","opacity","coords","idxParent","quantity","BarChart","key","concat","Object","values","zeros","xValues","keys","deltaX","series","point","idxline","ExampleComponent","text","styles","test"],"mappings":"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"}