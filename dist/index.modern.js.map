{"version":3,"file":"index.modern.js","sources":["../src/Input/Input.js","../src/Button/Button.js","../src/LineChart/LineChart.js","../src/Barchart/BarChart.js","../src/index.js"],"sourcesContent":["import React from 'react'\n\nimport './Input.scss'\n\nexport const Input = () => {\n  return <input className='alia-input' />\n}\n","import React from 'react'\n\nimport './Button.scss'\n\nexport const Button = ({ type = 'button', children }) => {\n  return <button type={type} className=\"d-button\">{children}</button>\n}\n","import React, { Fragment, useState } from 'react'\nimport './LineChart.scss'\n\nexport const LineChart = (props) => {\n  const { height, width, padding, data, labels } = props\n\n  if (!data) return null\n\n  const initialState2 = {}\n  data.forEach((data, idx) => (initialState2[idx] = true))\n\n  const [visible, setVisible] = useState(initialState2)\n\n  const colors = [\n    '#304e62',\n    '#55bcc8',\n    '#ABABAB',\n    '#304e62',\n    '#55bcc8',\n    '#ABABAB'\n  ]\n  const FONT_SIZE = 12\n\n  const maxX = Math.max(...data.map((d) => Math.max(...d.map((e) => e.x))))\n  const minX = Math.min(...data.map((d) => Math.min(...d.map((e) => e.x))))\n\n  const maxY = Math.max(...data.map((d) => Math.max(...d.map((e) => e.y)))) * 1.25 || 10;\n  const minY = Math.min(...data.map((d) => Math.min(...d.map((e) => e.y)))) * 1.25 || 10;\n\n  const points = data.map((singlePlot) =>\n    singlePlot\n      .map((element) => {\n        // Calculate coordinates\n        const x = ((element.x - minX) / (maxX - minX)) * width + padding\n        const y = height - (element.y / maxY) * height + padding\n        return `${x},${y}`\n      })\n      .join(' ')\n  )\n\n  const Axis = ({ points }) => (\n    <polyline\n      fill='solid'\n      stroke='#EDEDED'\n      strokeWidth='2'\n      points={points}\n      strokeLinecap='round'\n    />\n  )\n\n  const XAxis = () => (\n    <Axis points={`${padding},${height + 5} ${width},${height + 5}`} />\n  )\n\n  const HorizontalGuides = () => {\n    const startX = padding\n    const endX = width\n    const numberOfHorizontalGuides = 5\n\n    return new Array(numberOfHorizontalGuides).fill(0).map((_, index) => {\n      const yRatio = maxY / numberOfHorizontalGuides\n      const ratio = (index + 1) / numberOfHorizontalGuides\n\n      const yCoordinate = height - height * ratio + padding\n\n      return (\n        <Fragment key={index}>\n          <text\n            key={`${index}-text`}\n            x={startX}\n            y={yCoordinate - 5}\n            style={{\n              fontSize: 10,\n              fontFamily: 'Nunito',\n              fill: colors[2],\n              fontWeight: 'bold'\n            }}\n          >\n            {(index * yRatio + yRatio).toPrecision(2)} KW\n          </text>\n          <polyline\n            key={index}\n            fill='none'\n            stroke='#ccc'\n            strokeDasharray='5 5'\n            strokeLinecap='round'\n            strokeWidth='1'\n            points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\n          />\n        </Fragment>\n      )\n    })\n  }\n\n  const LabelsXAxis = () => {\n    const y = height - padding + FONT_SIZE * 2\n\n    return data[0].map((element, index) => {\n      const x =\n        ((element.x - minX) / (maxX - minX)) * width + 10 - FONT_SIZE / 2\n\n      return (\n        <text\n          key={index}\n          x={x}\n          y={y}\n          dominantBaseline='central'\n          textAnchor='start'\n          transform={`rotate(45, ${x}, ${y})`}\n          style={{\n            fill: '#ccc',\n            fontSize: FONT_SIZE,\n            fontWeight: 'bold',\n            fontFamily: 'Nunito'\n          }}\n        >\n          {element.label}\n        </text>\n      )\n    })\n  }\n  // const YAxis = () => (\n  //   <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\n  // )\n\n  const handleVisible = (idx) => {\n    setVisible((prevState) => {\n      const newState = { ...prevState }\n      newState[idx] = !newState[idx]\n      return newState\n    })\n  }\n\n  return (\n    <>\n      <div className='phase' style={{ float: 'right', marginBottom: '15px' }}>\n        {points.map((points, idx) => (\n          <a\n            key={idx}\n            style={{ color: colors[idx], opacity: visible[idx] ? 1 : 0.5 }}\n            onClick={(e) => handleVisible(idx)}\n          >\n            {labels[idx]}\n          </a>\n        ))}\n      </div>\n      <svg viewBox={`0 0 ${width} ${height + 100}`}>\n        <style>{`.small {color: 'red'} `}</style>\n\n        <XAxis />\n        <LabelsXAxis />\n        {/* <YAxis /> */}\n        <HorizontalGuides />\n        {points.map((points, idx) => {\n          if (visible[idx]) {\n            return (\n              <polyline\n                key={idx}\n                fill='none'\n                stroke={colors[idx]}\n                strokeWidth='3px'\n                strokeLinecap='round'\n                strokeDasharray='10 5'\n                points={points}\n              />\n            )\n          }\n        })}\n      </svg>\n    </>\n  )\n}\n","import React, { Fragment, useState } from 'react'\nimport './BarChart.scss'\n\nexport const BarChart = (props) => {\n  const { height, width, padding, data } = props\n\n  if (!data) return null\n\n  const initialState2 = {}\n  for (const key in data.data) {\n    initialState2[key] = true\n  }\n\n  const [visible, setVisible] = useState(initialState2)\n  // console.log(visible)\n  const colors = ['#55BDC8', '#304e62', '#ABABAB']\n  const FONT_SIZE = 12\n\n  const maxValue = Math.max(...[].concat(...Object.values(data.data)))\n  const zeros = 10 ** (maxValue.toFixed().toString().length - 1)\n  let maxY = (Math.ceil(maxValue / zeros) * zeros)\n\n  if (maxY < 1) {\n    maxY = 1\n  }\n\n  const xValues = Math.max(\n    ...Object.keys(data.data).map((key, idx) => data.data[key].length)\n  )\n\n  const deltaX = (width - 50) / xValues\n  // console.log(deltaX)\n  // console.log(maxY)\n  // generate [[[[x,y], [x,y]],[xy, xy]], []]\n  const points = Object.values(data.data).map((series) => {\n    return series.map((point, idx) => [\n      50 + deltaX * idx + 8,\n      height - (point / maxY) * height\n    ])\n  })\n\n  const Axis = ({ points }) => (\n    <polyline\n      fill='solid'\n      stroke='#EDEDED'\n      strokeWidth='2'\n      points={points}\n      strokeLinecap='round'\n    />\n  )\n\n  const XAxis = () => (\n    <Axis points={`${padding},${height + 36} ${width},${height + 36}`} />\n  )\n\n  const HorizontalGuides = () => {\n    const startX = padding\n    const endX = width\n    const numberOfHorizontalGuides = 5\n\n    return new Array(numberOfHorizontalGuides).fill(0).map((_, index) => {\n      const yRatio = maxY / numberOfHorizontalGuides\n      const ratio = (index + 1) / numberOfHorizontalGuides\n\n      const yCoordinate = height - height * ratio + padding + 20\n\n      return (\n        <Fragment key={index}>\n          <text\n            key={`${index}-text`}\n            x={startX}\n            y={yCoordinate - 5}\n            style={{\n              fontSize: 10,\n              fontFamily: 'Nunito',\n              fill: colors[2]\n            }}\n          >\n            {(index * yRatio + yRatio).toFixed(2)} kWh\n          </text>\n          <polyline\n            key={index}\n            fill='none'\n            stroke='#EDEDED'\n            strokeDasharray='3 3'\n            strokeLinecap='round'\n            strokeWidth='1'\n            points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\n          />\n        </Fragment>\n      )\n    })\n  }\n\n  const LabelsXAxis = () => {\n    const y = height - padding + FONT_SIZE * 2\n\n    return data.labels.map((element, index) => {\n      const x =\n        ((index - 0) / (12.7 - 0)) * width + 65 - FONT_SIZE / 2\n\n      return (\n        <text\n          key={index}\n          x={x}\n          y={y + 28}\n          style={{\n            fill: '#ccc',\n            fontSize: FONT_SIZE,\n            fontWeight: 'bold',\n            fontFamily: 'Nunito'\n          }}\n        >\n          {element}\n        </text>\n      )\n    })\n  }\n  // const YAxis = () => (\n  //   <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\n  // )\n\n  const handleVisible = (idx) => {\n    setVisible((prevState) => {\n      const newState = { ...prevState }\n      newState[idx] = !newState[idx]\n      return newState\n    })\n  }\n\n  return (\n    <>\n      <div className='phase' style={{ float: 'right', marginBottom: '15px' }}>\n        {Object.keys(data.data).map((key, idx) => (\n          <a\n            key={idx}\n            style={{ color: colors[idx], opacity: visible[key] ? 1 : 0.5 }}\n            onClick={(e) => handleVisible(key)}\n          >\n            {key}\n          </a>\n        ))}\n      </div>\n      <svg viewBox={`0 0 ${width} ${height + 60}`}>\n        <style>{`.small {color: 'red'} `}</style>\n\n        <XAxis />\n        <LabelsXAxis />\n        {/* <YAxis /> */}\n        <HorizontalGuides />\n        {points.map((series, idx) => {\n          if (visible[Object.keys(data.data)[idx]]) {\n            return series.map((point, idxline) => {\n              // <polyline\n              //   key={idx}\n              //   fill='none'\n              //   stroke={colors[idx]}\n              //   strokeWidth='3px'\n              //   strokeLinecap='round'\n              //   strokeDasharray='10 5'\n              //   points={points}\n              // />\n              return (\n                <line\n                  key={idxline}\n                  x1={point[0] + idx * 14}\n                  y1={point[1] + 25}\n                  x2={point[0] + idx * 14}\n                  y2={height + 25}\n                  stroke={colors[idx]}\n                  strokeWidth='9.5'\n                  strokeLinecap='round'\n                />\n              )\n            })\n          }\n          return null\n        })}\n      </svg>\n    </>\n  )\n}\n","import React from 'react'\nimport styles from './styles.module.css'\n// import Input from './Input'\n\n// Components\nexport { Input } from './Input'\nexport { Button } from './Button'\nexport { LineChart } from './LineChart'\nexport { BarChart } from './Barchart'\n\nexport const ExampleComponent = ({ text }) => {\n  return <div className={styles.test}>Example Component: {text}</div>\n}\n\n// export const Input = () => <div>Hola</div>\n"],"names":["Input","Button","type","children","LineChart","props","height","width","padding","data","labels","initialState2","forEach","idx","visible","setVisible","useState","colors","FONT_SIZE","maxX","Math","max","map","d","e","x","minX","min","maxY","y","minY","points","singlePlot","element","join","Axis","XAxis","HorizontalGuides","startX","endX","numberOfHorizontalGuides","Array","fill","_","index","yRatio","ratio","yCoordinate","fontSize","fontFamily","fontWeight","toPrecision","LabelsXAxis","label","handleVisible","prevState","newState","float","marginBottom","color","opacity","BarChart","key","maxValue","concat","Object","values","zeros","toFixed","toString","length","ceil","xValues","keys","deltaX","series","point","idxline","ExampleComponent","text","styles","test"],"mappings":"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"}