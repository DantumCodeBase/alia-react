{"version":3,"sources":["../../src/Input/Input.js","../../src/Button/Button.js","../../src/LineChart/LineChart.js","../../src/Barchart/BarChart.js","../../src/index.js","App.js","index.js"],"names":["Input","className","Button","type","children","LineChart","height","width","padding","data","labels","hourly","useState","tooltipVisible","setTooltipVisible","currentX","setCurrentX","useRef","initialState2","visible","setVisible","colors","colorsFill","maxX","Math","d","e","minX","maxValue","maxZeros","maxY","minValue","minZeros","minY","zeroY","points","singlePlot","element","polygonPoints","pointsCoords","xPointCoords","VerticalCurrentX","x","stroke","x1","y1","x2","y2","fill","strokeDasharray","strokeLinecap","strokeWidth","Axis","XAxis","HorizontalGuides","startX","endX","Array","numberOfHorizontalGuides","yRatio","displayNumber","index","yCoordinate","key","y","style","fontSize","fontFamily","fontWeight","LabelsXAxis","FONT_SIZE","hours","lastHour","lastHalf","lastX","currentHour","currentHalf","labelsXAxisHourly","dominantBaseline","textAnchor","transform","Mark","coord","idx","onMouseOver","onMouseLeave","pointerEvents","cx","cy","r","Tooltips","label","sublabel","rectPos","rx","float","marginBottom","color","opacity","onClick","newState","handleVisible","id","viewBox","onMouseMove","rect","document","coordX","event","curr","coords","gradientTransform","offset","stopColor","stopOpacity","idxParent","quantity","BarChart","props","Object","zeros","xValues","deltaX","series","point","map","ExampleComponent","text","styles","multidata","barChartData","Predicted","App","chartData","useEffect","maxWidth","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f85b0841.chunk.js","sourcesContent":["import React from 'react'\n\nimport './Input.scss'\n\nexport const Input = () => {\n  return <input className='alia-input' />\n}\n","import React from 'react'\n\nimport './Button.scss'\n\nexport const Button = ({ type = 'button', children }) => {\n  return <button type={type} className=\"d-button\">{children}</button>\n}\n","import React, { Fragment, useState, useRef } from 'react'\nimport Tooltip from '../Tooltip'\nimport './LineChart.scss'\n\nexport const LineChart = ({ height, width, padding, data, labels, hourly=true }) => {\n  const [tooltipVisible, setTooltipVisible] = useState(null)\n  const [currentX, setCurrentX] = useState(0)\n  const div = useRef();\n\n  if (!data) return null\n\n  const initialState2 = {}\n  data.forEach((data, idx) => (initialState2[idx] = true))\n\n  const [visible, setVisible] = useState(initialState2)\n\n  const colors = [\n    '#55bcc8',\n    '#304e62',\n    '#ABABAB',\n    '#304e62',\n    '#55bcc8',\n    '#ABABAB'\n  ]\n\n  const colorsFill = [\n    '#55bcc8',\n    '#304e62',\n    '#ABABAB',\n    '#304e62',\n    '#55bcc8',\n    '#ABABAB'\n  ]\n  const FONT_SIZE = 12\n\n  const maxX = Math.max(...data.map((d) => Math.max(...d.map((e) => e.x))))\n  const minX = Math.min(...data.map((d) => Math.min(...d.map((e) => e.x))))\n\n  const maxValue = Math.max(...data.map((d) => Math.max(...d.map((e) => e.y)))) * 1.25;\n  const maxZeros = 10 ** (maxValue.toFixed().toString().length - 1)\n  const maxY = (Math.ceil(maxValue / maxZeros) * maxZeros) || 5\n\n  const minValue = Math.min(...data.map((d) => Math.min(...d.map((e) => e.y)))) * 1.25;\n  const minZeros = 10 ** (Math.abs(minValue).toFixed().toString().length - 1)\n  let minY = (Math.floor(minValue / minZeros) * minZeros)\n\n  let zeroY = 200\n\n  if(minY < 0){\n    zeroY = height + padding - Math.abs(minY) / Math.abs(maxY - minY)*height || 200;\n  }\n\n\n\n  if (minY > 0) {\n    minY = 0\n  }\n\n\n  const points = data.map((singlePlot) =>\n    singlePlot\n      .map((element) => {\n        // Calculate coordinates\n        const x = ((element.x - minX) / (maxX - minX)) * width + padding\n        const y = height - (element.y / Math.abs(maxY - minY)) * height + padding - Math.abs(minY)/ Math.abs(maxY - minY)*height \n        return `${x},${y}`\n      })\n      .join(' ')\n  )\n\n  \n  const polygonPoints = data.map((singlePlot) =>\n    (`0,${200} ` +  singlePlot\n      .map((element) => {\n        // Calculate coordinates\n        const x = ((element.x - minX) / (maxX - minX)) * width + padding\n        const y = height - (element.y / Math.abs(maxY - minY)) * height + padding - Math.abs(minY)/ Math.abs(maxY - minY)*height\n        return `${x},${y}`\n      })\n      .join(' ') + ` ${width},${200}`) \n  )\n\n\n  const pointsCoords = data.map((singlePlot, idx) =>\n    singlePlot\n      .map((element) => {\n        // Calculate coordinates\n        const x = ((element.x - minX) / (maxX - minX)) * width + padding\n        const y = height - (element.y / Math.abs(maxY - minY)) * height + padding - Math.abs(minY)/ Math.abs(maxY - minY)*height \n        \n        return [x, y, element.y, idx, element.label]\n      })\n  )\n\n  const xPointCoords = data.map((singlePlot, idx)=>\n      singlePlot.map( element => {\n        const x = ((element.x - minX) / (maxX - minX)) * width + padding\n        return x\n      })\n  )\n  \n  const VerticalCurrentX = ({ x, stroke='#a0a0a0' }) => {\n    return (\n      <line\n        x1={x}\n        y1='0'\n        x2={x}\n        y2={height}\n        fill='solid'\n        stroke={stroke}\n        strokeDasharray='5 5'\n        strokeLinecap='round'\n        strokeWidth='2'\n        // style=\"stroke:rgb(255,0,0);stroke-width:2\" \n      />\n    )\n  }\n\n  const Axis = ({ points, stroke='#EDEDED' }) => (\n    <polyline\n      fill='solid'\n      stroke={stroke}\n      strokeWidth='1'\n      points={points}\n      strokeLinecap='round'\n    />\n  )\n\n  const XAxis = () => {\n    return (<Axis stroke='#a0a0a0' strokeLinecap='round' points={`${padding},${zeroY} ${width},${zeroY}`} />);\n  }\n\n\n\n  const HorizontalGuides = () => {\n    const startX = padding\n    const endX = width\n    const numberOfHorizontalGuides = 5\n\n    return new Array(numberOfHorizontalGuides -1).fill(0).map((_, index) => {\n      const yRatio = Math.abs(maxY-minY) / numberOfHorizontalGuides\n      const ratio = (index + 1) / numberOfHorizontalGuides\n      const displayNumber = index * yRatio + yRatio + minY;\n      const yCoordinate = height - height * ratio + padding\n\n      return (\n        <Fragment key={index}>\n          <text\n            key={`${index}-text`}\n            x={startX}\n            y={ displayNumber>=0 ? (yCoordinate - 5) : (yCoordinate + 15) }\n            style={{\n              fontSize: 14,\n              fontFamily: 'Nunito',\n              fill: colors[2],\n              fontWeight: 'bold'\n            }}\n          >\n            {(index * yRatio + yRatio + minY ).toPrecision(4)} KW\n          </text>\n          <polyline\n            key={index}\n            fill='none'\n            stroke='#e0e0e0'\n            strokeDasharray='1 5'\n            strokeLinecap='round'\n            strokeWidth='1'\n            points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\n          />\n        </Fragment>\n      )\n    })\n  }\n\n\n  const labelsXAxisHourly = () => {\n    const hours = []\n\n    let lastHour = null\n    let lastHalf = null\n    let lastX = 0\n    for(let element of data[0]){\n      const currentHour = element.label.split(':')[0]\n      const currentHalf = (element.label.split(':')[1] > 20 && element.label.split(':')[1] < 40) ? 30 : null\n      if(lastHour != currentHour){\n        hours.push([lastX, `${lastHour}:${lastHalf ? '30':'00'}`])\n        lastHour = currentHour\n        lastHalf = currentHalf\n        lastX = element.x\n      } \n\n\n    }\n  \n    return hours.slice(1)\n  }\n\n\n  const LabelsXAxis = () => {\n    const y = height - padding + FONT_SIZE * 2 - Math.abs(minY)/Math.abs(maxY-minY)*height || 224;\n\n\n    if(hourly){\n        const labelsPerHour = labelsXAxisHourly()\n        return labelsPerHour.map((element, index) => {\n            const x =\n            ((element[0] - minX) / (maxX - minX)) * width + 10 - FONT_SIZE / 2\n    \n          return (\n            <text\n              key={index}\n              x={x}\n              y={y - 20}\n              dominantBaseline='central'\n              textAnchor='start'\n              transform={`rotate(45, ${x}, ${y})`}\n              style={{\n                fill: '#a0a0a0',\n                fontSize: FONT_SIZE,\n                fontWeight: 'bold',\n                fontFamily: 'Nunito'\n              }}\n            >\n              {element[1]}\n            </text>\n          )\n          })\n    }\n\n    return data[0].map((element, index) => {\n      const x =\n        ((element.x - minX) / (maxX - minX)) * width + 10 - FONT_SIZE / 2\n\n      return (\n        <text\n          key={index}\n          x={x}\n          y={y - 20}\n          dominantBaseline='central'\n          textAnchor='start'\n          transform={`rotate(45, ${x}, ${y})`}\n          style={{\n            fill: '#a0a0a0',\n            fontSize: FONT_SIZE,\n            fontWeight: 'bold',\n            fontFamily: 'Nunito'\n          }}\n        >\n          {element.label}\n        </text>\n      )\n    })\n  }\n  // const YAxis = () => (\n  //   <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\n  // )\n\n  const handleVisible = (idx) => {\n    setVisible((prevState) => {\n      const newState = { ...prevState }\n      newState[idx] = !newState[idx]\n      return newState\n    })\n  }\n\n\n\n  const Mark = ({coord, idx, onMouseOver, onMouseLeave, color=\"red\"}) => {\n    return (\n     <g key={`dot-${idx}`} pointerEvents='all'>\n        <circle\n          key={`circle-${idx}`}\n          cx={coord[0]}\n          cy={coord[1]}\n          r='5'\n          fill={\n            tooltipVisible === `${coord[0]}-${coord[3]}`\n              ? colorsFill[0]\n              : 'none'\n          }\n        />\n        <circle\n          key={`circlecontour-${idx}`}\n          onMouseOver={onMouseOver}\n          onMouseLeave={onMouseLeave}\n          cx={coord[0]}\n          cy={coord[1]}\n          r='10'\n          fill='none'\n          strokeWidth='2'\n          stroke={\n            tooltipVisible === `${coord[0]}-${coord[3]}`\n              ? colorsFill[0]\n              : 'none'\n          }\n        />\n        <polygon \n          fill={\n            tooltipVisible === `${coord[0]}-${coord[3]}`\n              ? colorsFill[0]\n              : 'none'\n          } \n          points={`${coord[0] + 15} ${coord[1] - 5}, ${coord[0] + 20} ${coord[1] + 0}, ${coord[0] + 15} ${coord[1]+5}`} />\n          <polygon \n          fill={\n            tooltipVisible === `${coord[0]}-${coord[3]}`\n              ? colorsFill[0]\n              : 'none'\n          } \n          points={`${coord[0] - 15} ${coord[1] - 5}, ${coord[0] - 20} ${coord[1] + 0}, ${coord[0] - 15} ${coord[1]+5}`} />\n      </g>\n      )\n  }\n\n\n  const Tooltips = ({x=500,y=70, label=\"545.245 MW\", sublabel=\"3:24:02\"}) => {\n\n    const rectPos = [x-35, y - 40]\n\n    const height = 25\n    const width = 50\n\n    return (<>\n      <rect x={rectPos[0]} y={rectPos[1]} width={width + label.length*4} height={height} rx=\"15\" fill=\"#c0c0c0\">\n      </rect>\n      <text\n        x={rectPos[0] + (width - label.length)/3}\n        y={rectPos[1] + height/2}\n        style={{\n          fill: 'white',\n          fontSize: '0.7rem',\n          fontWeight: 'bold',\n          fontFamily: 'Nunito'\n        }}>\n          {label}\n      </text>\n      <text\n        x={rectPos[0] + (width - label.length)/3}\n        y={rectPos[1] + height/2 + 10}\n        style={{\n          fill: 'white',\n          fontSize: '0.6rem',\n          fontWeight: 'bold',\n          fontFamily: 'Nunito'\n        }}>\n          {sublabel}\n      </text>\n\n      </>\n    )\n  }\n\n\n  return (\n    <>\n      <div  className='phase' style={{ float: 'right', marginBottom: '15px'}\n    }\n      >\n        {points.map((points, idx) => (\n          <a\n            key={idx}\n            style={{ color: colors[idx], opacity: visible[idx] ? 1 : 0.5 }}\n            onClick={(e) => handleVisible(idx)}\n          >\n            {labels[idx]}\n          </a>\n        ))}\n      </div>\n      <svg \n        id='graphcontainer'\n        viewBox={`0 0 ${width} ${height + 100}`}\n        onMouseMove={(event) => {\n          // console.log(event.clientX - bounds.x)\n          const rect = document.getElementById('graphcontainer').getBoundingClientRect();\n          const coordX = (event.clientX-rect.x)/rect.width * width\n          // console.log(coordX)\n          // console.log(xPointCoords[0])\n\n\n          \n          let curr = xPointCoords[0][0]\n          let idx = 0\n          // Find the closest \n          for(let x of xPointCoords[0]){\n            if(Math.abs(x - coordX) < Math.abs(curr - coordX)) {\n              curr = x\n            }\n            idx++;\n          }\n\n          const coord = pointsCoords.map(coords => coords.filter((coord)=> coord[0]===curr))[0][0]\n          setCurrentX(curr)\n          setTooltipVisible(`${coord[0]}-${coord[3]}`)\n        }}\n      >\n        <style>{`.small {color: 'red'} .linear {backgroundColor:'blue'}`}</style>\n        <defs>\n          <linearGradient\n            id='three_opacity'\n            gradientTransform='rotate(90)'\n          >\n            <stop offset=\"0%\" stopColor={colorsFill[0]} stopOpacity=\"0.6\" />\n            <stop offset=\"50%\" stopColor={colorsFill[0]} stopOpacity=\"0.1\" />\n            <stop offset=\"100%\" stopColor={colorsFill[0]} stopOpacity=\"0.0\" />\n          </linearGradient>\n        </defs>\n        {currentX && <VerticalCurrentX x={currentX} />}\n\n        <XAxis />\n        <LabelsXAxis />\n\n        {/* <YAxis /> */}\n        <HorizontalGuides />\n\n        {polygonPoints.map((points, idx) => {\n          if (visible[idx]) {\n            return (\n               <polygon key={idx} points={points} fill={`url('#three_opacity')`}/>\n            )\n          }\n        })}\n        {points.map((points, idx) => {\n          if (visible[idx]) {\n            return (\n              <polyline\n                key={idx}\n                fill='none'\n                stroke={colors[idx]}\n                strokeWidth='3px'\n                strokeLinecap='round'\n                strokeDasharray='1'\n                points={points}\n              />\n            )\n          }\n        })}\n\n\n        {pointsCoords.map((coords, idxParent) => {\n          if (visible[idxParent]) {\n            return coords.map((coord, idx) => {\n              return (\n                  <Mark\n                    key={idx}\n                    coord={coord}\n                    idx={idx}\n                    color={colors[idxParent]}\n                    // onMouseOver={() =>\n                    //   setTooltipVisible(`${coord[0]}-${coord[3]}`)\n                    // }\n                    // onMouseLeave={() => {\n                    //   setTooltipVisible(null)\n                    // }}\n                  />\n              )\n            }\n            )\n          }\n\n        })}     \n        \n        \n        {pointsCoords.map((coords, idx) => {\n            if (visible[idx]) {\n              return coords.map((coord, idx)=> {\n                const quantity = coord[2].toFixed(2)\n                return (\n                   tooltipVisible == `${coord[0]}-${coord[3]}` && \n                    <Tooltips key={idx} x={coord[0]} y={coord[1]} label={`${quantity} kW`} sublabel={coord[4]}>\n                    </Tooltips>\n                )\n              }\n              )\n            }\n          })} \n\n      </svg>\n\n      \n    </>\n  )\n}\n","import React, { Fragment, useState } from 'react'\nimport './BarChart.scss'\n\nexport const BarChart = (props) => {\n  const { height, width, padding, data } = props\n\n  if (!data) return null\n\n  const initialState2 = {}\n  for (const key in data.data) {\n    initialState2[key] = true\n  }\n\n  const [visible, setVisible] = useState(initialState2)\n  // console.log(visible)\n  const colors = ['#55BDC8', '#304e62', '#ABABAB']\n  const FONT_SIZE = 12\n\n  const maxValue = Math.max(...[].concat(...Object.values(data.data)))\n  const zeros = 10 ** (maxValue.toFixed().toString().length - 1)\n  let maxY = (Math.ceil(maxValue / zeros) * zeros)\n\n  if (maxY < 1) {\n    maxY = 1\n  }\n\n  const xValues = Math.max(\n    ...Object.keys(data.data).map((key, idx) => data.data[key].length)\n  )\n\n  const deltaX = (width - 50) / xValues\n  // console.log(deltaX)\n  // console.log(maxY)\n  // generate [[[[x,y], [x,y]],[xy, xy]], []]\n  const points = Object.values(data.data).map((series) => {\n    return series.map((point, idx) => [\n      50 + deltaX * idx + 8,\n      height - (point / maxY) * height\n    ])\n  })\n\n  const Axis = ({ points }) => (\n    <polyline\n      fill='solid'\n      stroke='#EDEDED'\n      strokeWidth='2'\n      points={points}\n      strokeLinecap='round'\n    />\n  )\n\n  const XAxis = () => (\n    <Axis points={`${padding},${height + 36} ${width},${height + 36}`} />\n  )\n\n  const HorizontalGuides = () => {\n    const startX = padding\n    const endX = width\n    const numberOfHorizontalGuides = 5\n\n    return new Array(numberOfHorizontalGuides).fill(0).map((_, index) => {\n      const yRatio = maxY / numberOfHorizontalGuides\n      const ratio = (index + 1) / numberOfHorizontalGuides\n\n      const yCoordinate = height - height * ratio + padding + 20\n\n      return (\n        <Fragment key={index}>\n          <text\n            key={`${index}-text`}\n            x={startX}\n            y={yCoordinate - 5}\n            style={{\n              fontSize: 10,\n              fontFamily: 'Nunito',\n              fill: colors[2]\n            }}\n          >\n            {(index * yRatio + yRatio).toFixed(2)} kWh\n          </text>\n          <polyline\n            key={index}\n            fill='none'\n            stroke='#EDEDED'\n            strokeDasharray='3 3'\n            strokeLinecap='round'\n            strokeWidth='1'\n            points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\n          />\n        </Fragment>\n      )\n    })\n  }\n\n  const LabelsXAxis = () => {\n    const y = height - padding + FONT_SIZE * 2\n\n    return data.labels.map((element, index) => {\n      const x =\n        ((index - 0) / (12.7 - 0)) * width + 65 - FONT_SIZE / 2\n\n      return (\n        <text\n          key={index}\n          x={x}\n          y={y + 28}\n          style={{\n            fill: '#ccc',\n            fontSize: FONT_SIZE,\n            fontWeight: 'bold',\n            fontFamily: 'Nunito'\n          }}\n        >\n          {element}\n        </text>\n      )\n    })\n  }\n  // const YAxis = () => (\n  //   <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\n  // )\n\n  const handleVisible = (idx) => {\n    setVisible((prevState) => {\n      const newState = { ...prevState }\n      newState[idx] = !newState[idx]\n      return newState\n    })\n  }\n\n  return (\n    <>\n      <div className='phase' style={{ float: 'right', marginBottom: '15px' }}>\n        {Object.keys(data.data).map((key, idx) => (\n          <a\n            key={idx}\n            style={{ color: colors[idx], opacity: visible[key] ? 1 : 0.5 }}\n            onClick={(e) => handleVisible(key)}\n          >\n            {key}\n          </a>\n        ))}\n      </div>\n      <svg viewBox={`0 0 ${width} ${height + 60}`}>\n        <style>{`.small {color: 'red'} `}</style>\n\n        <XAxis />\n        <LabelsXAxis />\n        {/* <YAxis /> */}\n        <HorizontalGuides />\n        {points.map((series, idx) => {\n          if (visible[Object.keys(data.data)[idx]]) {\n            return series.map((point, idxline) => {\n              // <polyline\n              //   key={idx}\n              //   fill='none'\n              //   stroke={colors[idx]}\n              //   strokeWidth='3px'\n              //   strokeLinecap='round'\n              //   strokeDasharray='10 5'\n              //   points={points}\n              // />\n              return (\n                <line\n                  key={idxline}\n                  x1={point[0] + idx * 14}\n                  y1={point[1] + 25}\n                  x2={point[0] + idx * 14}\n                  y2={height + 25}\n                  stroke={colors[idx]}\n                  strokeWidth='9.5'\n                  strokeLinecap='round'\n                />\n              )\n            })\n          }\n          return null\n        })}\n      </svg>\n    </>\n  )\n}\n","import React from 'react'\nimport styles from './styles.module.css'\n// import Input from './Input'\n\n// Components\nexport { Input } from './Input'\nexport { Button } from './Button'\nexport { LineChart } from './LineChart'\nexport { BarChart } from './Barchart'\n\nexport const ExampleComponent = ({ text }) => {\n  return <div className={styles.test}>Example Component: {text}</div>\n}\n\n// export const Input = () => <div>Hola</div>\n","import React, { useState, useEffect } from 'react'\n\nimport {\n  ExampleComponent,\n  Input,\n  Button,\n  LineChart,\n  BarChart\n} from 'alia-react'\nimport 'alia-react/dist/index.css'\n\nconst multidata = [\n  [\n    { label: '12:20:01', x: 0, y: 48 },\n    { label: '12:56:59', x: 1, y: 48 },\n    { label: '1:00:03', x: 2, y: 48 },\n    { label: '1:40:04', x: 3, y: 48},\n    { label: '1:50:05', x: 4, y: 48 },\n    { label: '1:60:06', x: 5, y: 48 },\n    { label: '2:15:07', x: 6, y: 48 },\n    { label: '2:24:01', x: 7, y: 48 },\n    { label: '2:45:02', x: 8, y: 148.4564 },\n    { label: '3:00:03', x: 9, y: 48},\n    { label: '3:24:04', x: 10, y: 48},\n    { label: '3:24:05', x: 11, y: 48 },\n    { label: '4:24:06', x: 12, y: 48 },\n    { label: '4:24:07', x: 13, y: 48 }\n  ],\n\n]\n\n\n// const multidata = [\n//   [\n//     { label: '12:20:01', x: 0, y: 48 },\n//     { label: '12:56:59', x: 1, y: 200.37 },\n//     { label: '1:00:03', x: 2, y: 200.37 },\n//     { label: '1:40:04', x: 3, y: 200.37},\n//     { label: '1:50:05', x: 4, y: 20.37 },\n//     { label: '1:60:06', x: 5, y: 200.37 },\n//     { label: '2:15:07', x: 6, y: 20.37 },\n//     { label: '2:24:01', x: 7, y: 200.37 },\n//     { label: '2:45:02', x: 8, y: 200.37 },\n//     { label: '3:00:03', x: 9, y:  120.37},\n//     { label: '3:24:04', x: 10, y: 20.37},\n//     { label: '3:24:05', x: 11, y: 20.37 },\n//     { label: '4:24:06', x: 12, y: 20.37 },\n//     { label: '4:24:07', x: 13, y: 20.37 }\n//   ],\n//   [\n//     { label: '3:24:01', x: 0, y: 6.84 },\n//     { label: '3:24:02', x: 1, y: 6.84 },\n//     { label: '3:24:03', x: 2, y: 600.84 },\n//     { label: '3:24:04', x: 3, y: 6.84},\n//     { label: '3:24:05', x: 4, y: 6.84 },\n//     { label: '3:24:06', x: 5, y: 6.84 },\n//     { label: '3:24:07', x: 6, y: 6.84 },\n//     { label: '3:24:01', x: 7, y: 6.84 },\n//     { label: '3:24:02', x: 8, y: 6.84 },\n//     { label: '3:24:03', x: 9, y:  6.84},\n//     { label: '3:24:04', x: 10, y: 6.84},\n//     { label: '3:24:05', x: 11, y: 6.84 },\n//     { label: '3:24:06', x: 12, y: 6.84 },\n//     { label: '3:24:07', x: 13, y: 6.84 }\n//   ],\n//   [\n//     { label: '3:24:01', x: 0, y: 6.84 },\n//     { label: '3:24:02', x: 1, y: 6.84 },\n//     { label: '3:24:03', x: 2, y: 6.84 },\n//     { label: '3:24:04', x: 3, y: 6.84},\n//     { label: '3:24:05', x: 4, y: 6.84 },\n//     { label: '3:24:06', x: 5, y: 6.84 },\n//     { label: '3:24:07', x: 6, y: 600.84 },\n//     { label: '3:24:01', x: 7, y: 6.84 },\n//     { label: '3:24:02', x: 8, y: 6.84 },\n//     { label: '3:24:03', x: 9, y:  6.84},\n//     { label: '3:24:04', x: 10, y: 6.84},\n//     { label: '3:24:05', x: 11, y: 6.84 },\n//     { label: '3:24:06', x: 12, y: 6.84 },\n//     { label: '3:24:07', x: 13, y: 6.84 }\n//   ],\n//   [\n//     { label: '3:24:01', x: 0, y: 60.84 },\n//     { label: '3:24:02', x: 1, y: 60.84 },\n//     { label: '3:24:03', x: 2, y: 60.84 },\n//     { label: '3:24:04', x: 3, y: 60.84},\n//     { label: '3:24:05', x: 4, y: 60.84 },\n//     { label: '3:24:06', x: 5, y: 60.84 },\n//     { label: '3:24:07', x: 6, y: 60.84 },\n//     { label: '3:24:01', x: 7, y: 6.84 },\n//     { label: '3:24:02', x: 8, y: 60.84 },\n//     { label: '3:24:03', x: 9, y:  60.84},\n//     { label: '3:24:04', x: 10, y: 60.84},\n//     { label: '3:24:05', x: 11, y: 6.84 },\n//     { label: '3:24:06', x: 12, y: 6.84 },\n//     { label: '3:24:07', x: 13, y: 6.84 }\n//   ]\n// ]\n\n\n// const multidata = [\n//   [\n//     { label: '3:24:01', x: 0, y: 100 },\n//     { label: '3:24:02', x: 1, y: 100 },\n//     { label: '3:24:03', x: 2, y: 100 },\n//     { label: '3:24:04', x: 3, y: 100}, \n//     { label: '3:24:05', x: 4, y: 100 },\n//     { label: '3:24:06', x: 5, y: 100 },\n//     { label: '3:24:07', x: 6, y: 100 },\n//     { label: '3:24:01', x: 7, y: 100 },\n//     { label: '3:24:02', x: 8, y: 100 },\n//     { label: '3:24:03', x: 9, y:  100},\n//     { label: '3:24:04', x: 10, y: 100},\n//     { label: '3:24:05', x: 11, y: 100 },\n//     { label: '3:24:06', x: 12, y: 100 },\n//     { label: '3:24:07', x: 13, y: 100 }\n//   ],\n//   [\n//     { label: '3:24:01', x: 0, y: -200 },\n//     { label: '3:24:02', x: 1, y: -200 },\n//     { label: '3:24:03', x: 2, y: -200 },\n//     { label: '3:24:04', x: 3, y: -200},\n//     { label: '3:24:05', x: 4, y: -200 },\n//     { label: '3:24:06', x: 5, y: -200 },\n//     { label: '3:24:07', x: 6, y: -200 },\n//     { label: '3:24:01', x: 7, y: -200 },\n//     { label: '3:24:02', x: 8, y: -200 },\n//     { label: '3:24:03', x: 9, y:  -200},\n//     { label: '3:24:04', x: 10, y: -200},\n//     { label: '3:24:05', x: 11, y: -200 },\n//     { label: '3:24:06', x: 12, y: -200 },\n//     { label: '3:24:07', x: 13, y: -200 }\n//   ],\n//   [\n//     { label: '3:24:01', x: 0, y: -200 },\n//     { label: '3:24:02', x: 1, y: -200 },\n//     { label: '3:24:03', x: 2, y: -200 },\n//     { label: '3:24:04', x: 3, y: -200},\n//     { label: '3:24:05', x: 4, y: -200 },\n//     { label: '3:24:06', x: 5, y: -200 },\n//     { label: '3:24:07', x: 6, y: -200 },\n//     { label: '3:24:01', x: 7, y: -200 },\n//     { label: '3:24:02', x: 8, y: -200 },\n//     { label: '3:24:03', x: 9, y:  -200},\n//     { label: '3:24:04', x: 10, y: -200},\n//     { label: '3:24:05', x: 11, y: -200 },\n//     { label: '3:24:06', x: 12, y: -200 },\n//     { label: '3:24:07', x: 13, y: -200 }\n//   ]\n// ]\n\n\nconst timeseriesData = [\n  [\n    { label: 'test', x: 7, y: 3 },\n    { label: 'test', x: 7, y: 9 },\n    { label: 'test', x: 7, y: 100 }\n  ],\n  [\n    { label: 'test', x: 8, y: 3 },\n    { label: 'test', x: 8, y: 3 },\n    { label: 'test', x: 8, y: 3 }\n  ],\n  [\n    { label: 'test', x: 9, y: 3 },\n    { label: 'test', x: 9, y: 2 },\n    { label: 'test', x: 9, y: 1 }\n  ],\n  [\n    { label: 'test', x: 10, y: 5 },\n    { label: 'test', x: 10, y: 3 },\n    { label: 'test', x: 10, y: 1 }\n  ],\n  [\n    { label: 'test', x: 11, y: 4 },\n    { label: 'test', x: 11, y: 1 },\n    { label: 'test', x: 11, y: 7 }\n  ],\n  [\n    { label: 'test', x: 12, y: 3 },\n    { label: 'test', x: 12, y: 8 },\n    { label: 'test', x: 12, y: 5 }\n  ],\n  [\n    { label: 'test', x: 13, y: 6 },\n    { label: 'test', x: 13, y: 2 },\n    { label: 'test', x: 13, y: 1 }\n  ],\n  [\n    { label: 'test', x: 14, y: 4 },\n    { label: 'test', x: 14, y: 8 },\n    { label: 'test', x: 14, y: 2 }\n  ]\n]\n\nconst barChartData = {\n  data: {\n    '2019': [0, 100, 400, 700, 1000, 1300, 1600, 1900, 45, 63, 32, 21],\n    '2020': [4, 200, 500, 800, 1100, 1400, 1700, 2000, 90, 50, 80, 42],\n    Predicted: [56, 300, 600, 900, 1200, 1500, 1800, 800, 0, 60, 56, 84],\n  }\n  , labels: [\"Ene\", \"Feb\", \"Mar\", \"Abr\", \"May\", \"Jun\", \"Jul\", \"Ago\", \"Sep\", \"Oct\", \"Nov\", \"Dic\"]\n\n}\n\nconst App = () => {\n  const [chartData, setChartData] = useState(multidata)\n\n  useEffect(() => {\n    const updateData = () => {\n      setTimeout(() => {\n        let newdata = [...multidata]\n        setChartData(newdata)\n        // console.log(newdata)\n        updateData()\n      }, 3000)\n    }\n  }, [])\n\n  const labels = ['Phase 1', 'Phase 2', 'Phase 3']\n\n  // console.log('REcalc')\n\n  return (\n    <div>\n      <ExampleComponent text='Create React Library Example' />\n      <Input></Input>\n      <Button>Login</Button>\n      <div style={{ padding: 100, maxWidth: 700 }}>\n        <LineChart\n          key=\"uno\"\n          data={chartData}\n          labels={labels}\n          height={200}\n          width={800}\n          padding={0}\n        />\n          <LineChart\n          key=\"dos\"\n          data={chartData}\n          labels={labels}\n          height={200}\n          width={800}\n          padding={0}\n        />\n      </div>\n      <div style={{ padding: 25, maxWidth: 700 }}>\n        <BarChart\n          data={barChartData}\n          height={200}\n          width={800}\n          padding={0}\n        ></BarChart>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}